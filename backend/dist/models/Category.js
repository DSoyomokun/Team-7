"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Category = void 0;
class Category {
    constructor({ id, user_id, name, color, icon, is_default = false }) {
        // Validation
        if (!user_id)
            throw new Error('user_id is required');
        if (!name || name.trim().length === 0)
            throw new Error('name is required and cannot be empty');
        // Validate color format if provided
        if (color && !this.isValidHexColor(color)) {
            throw new Error('color must be a valid hex color code (e.g., #FF5733)');
        }
        this.id = id || undefined; // Will be generated by database
        this.user_id = user_id;
        this.name = name.trim();
        this.color = color?.toUpperCase() || undefined; // Store in uppercase for consistency
        this.icon = icon || undefined;
        this.is_default = is_default;
    }
    toJSON() {
        return {
            id: this.id,
            user_id: this.user_id,
            name: this.name,
            color: this.color,
            icon: this.icon,
            is_default: this.is_default,
        };
    }
    // Helper method to validate hex color
    isValidHexColor(color) {
        const hexColorRegex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;
        return hexColorRegex.test(color);
    }
    // Method to get contrasting text color for the category color
    getContrastingTextColor() {
        if (!this.color)
            return '#000000'; // Default to black if no color
        // Remove # and convert to RGB
        const hex = this.color.replace('#', '');
        const r = parseInt(hex.substr(0, 2), 16);
        const g = parseInt(hex.substr(2, 2), 16);
        const b = parseInt(hex.substr(4, 2), 16);
        // Calculate luminance
        const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
        // Return black for light colors, white for dark colors
        return luminance > 0.5 ? '#000000' : '#FFFFFF';
    }
    // Static validation method
    static validate(props) {
        const errors = [];
        if (!props.user_id)
            errors.push('user_id is required');
        if (!props.name || props.name.trim().length === 0)
            errors.push('name is required and cannot be empty');
        // Validate color format if provided
        if (props.color) {
            const hexColorRegex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;
            if (!hexColorRegex.test(props.color)) {
                errors.push('color must be a valid hex color code (e.g., #FF5733)');
            }
        }
        // Validate icon if provided (basic validation for common icon naming patterns)
        if (props.icon) {
            const iconNameRegex = /^[a-z][a-z0-9-]*[a-z0-9]$/;
            if (!iconNameRegex.test(props.icon)) {
                errors.push('icon must be a valid icon identifier (lowercase, hyphen-separated)');
            }
        }
        return {
            isValid: errors.length === 0,
            errors
        };
    }
    // Static method to create default categories for a new user
    static createDefaultCategories(user_id) {
        const defaultCategories = [
            { name: 'Food & Dining', color: '#FF6B6B', icon: 'restaurant' },
            { name: 'Transportation', color: '#4ECDC4', icon: 'car' },
            { name: 'Shopping', color: '#45B7D1', icon: 'shopping-bag' },
            { name: 'Entertainment', color: '#96CEB4', icon: 'movie' },
            { name: 'Bills & Utilities', color: '#FECA57', icon: 'receipt' },
            { name: 'Healthcare', color: '#FF9FF3', icon: 'medical' },
            { name: 'Education', color: '#54A0FF', icon: 'book' },
            { name: 'Income', color: '#5F27CD', icon: 'dollar-sign' },
            { name: 'Savings', color: '#00D2D3', icon: 'piggy-bank' },
            { name: 'Other', color: '#747D8C', icon: 'more-horizontal' }
        ];
        return defaultCategories.map(cat => new Category({
            user_id,
            name: cat.name,
            color: cat.color,
            icon: cat.icon,
            is_default: true
        }));
    }
    // Static method to get predefined color palette
    static getColorPalette() {
        return [
            '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57',
            '#FF9FF3', '#54A0FF', '#5F27CD', '#00D2D3', '#747D8C',
            '#FF7675', '#74B9FF', '#A29BFE', '#FD79A8', '#FDCB6E',
            '#6C5CE7', '#E17055', '#00B894', '#00CEC9', '#2D3436'
        ];
    }
    // Static method to get common icon options
    static getCommonIcons() {
        return [
            'restaurant', 'car', 'shopping-bag', 'movie', 'receipt',
            'medical', 'book', 'dollar-sign', 'piggy-bank', 'more-horizontal',
            'home', 'gas-pump', 'coffee', 'gift', 'plane',
            'dumbbell', 'music', 'phone', 'wifi', 'zap'
        ];
    }
}
exports.Category = Category;
//# sourceMappingURL=Category.js.map